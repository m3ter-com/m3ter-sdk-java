// File generated from our OpenAPI spec by Stainless.

package com.m3ter.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.m3ter.core.JsonValue
import com.m3ter.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class BillSearchResponseTest {

    @Test
    fun create() {
        val billSearchResponse =
            BillSearchResponse.builder()
                .addData(
                    BillResponse.builder()
                        .id("id")
                        .version(0L)
                        .accountCode("accountCode")
                        .accountId("accountId")
                        .billDate(LocalDate.parse("2019-12-27"))
                        .billFrequencyInterval(0)
                        .billingFrequency(BillResponse.BillingFrequency.DAILY)
                        .billJobId("billJobId")
                        .billTotal(0.0)
                        .createdBy("createdBy")
                        .createdDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .csvStatementGenerated(true)
                        .currency("currency")
                        .addCurrencyConversion(
                            CurrencyConversion.builder()
                                .from("EUR")
                                .to("USD")
                                .multiplier(1.12)
                                .build()
                        )
                        .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .dueDate(LocalDate.parse("2019-12-27"))
                        .endDate(LocalDate.parse("2019-12-27"))
                        .endDateTimeUtc(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .externalInvoiceDate(LocalDate.parse("2019-12-27"))
                        .externalInvoiceReference("externalInvoiceReference")
                        .jsonStatementGenerated(true)
                        .lastCalculatedDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .lastModifiedBy("lastModifiedBy")
                        .addLineItem(
                            BillResponse.LineItem.builder()
                                .averageUnitPrice(0.0)
                                .conversionRate(0.0)
                                .convertedSubtotal(0.0)
                                .currency("x")
                                .description("x")
                                .lineItemType(BillResponse.LineItem.LineItemType.STANDING_CHARGE)
                                .quantity(0.0)
                                .subtotal(0.0)
                                .unit("unit")
                                .units(0.0)
                                .id("id")
                                .aggregationId("aggregationId")
                                .balanceId("balanceId")
                                .chargeId("chargeId")
                                .childAccountCode("childAccountCode")
                                .childAccountId("childAccountId")
                                .commitmentId("commitmentId")
                                .compoundAggregationId("compoundAggregationId")
                                .contractId("contractId")
                                .counterId("counterId")
                                .creditTypeId("creditTypeId")
                                .group(
                                    BillResponse.LineItem.Group.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .meterId("meterId")
                                .planGroupId("planGroupId")
                                .planId("planId")
                                .pricingId("pricingId")
                                .productCode("productCode")
                                .productId("productId")
                                .productName("productName")
                                .reasonId("reasonId")
                                .referencedBillId("referencedBillId")
                                .referencedLineItemId("referencedLineItemId")
                                .segment(
                                    BillResponse.LineItem.Segment.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .sequenceNumber(0)
                                .servicePeriodEndDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .servicePeriodStartDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .addUsagePerPricingBand(
                                    BillResponse.LineItem.UsagePerPricingBand.builder()
                                        .bandQuantity(0.0)
                                        .bandSubtotal(0.0)
                                        .bandUnits(0.0)
                                        .creditTypeId("creditTypeId")
                                        .fixedPrice(0.0)
                                        .lowerLimit(0.0)
                                        .pricingBandId("pricingBandId")
                                        .unitPrice(0.0)
                                        .unitSubtotal(0.0)
                                        .build()
                                )
                                .build()
                        )
                        .locked(true)
                        .purchaseOrderNumber("purchaseOrderNumber")
                        .sequentialInvoiceNumber("sequentialInvoiceNumber")
                        .startDate(LocalDate.parse("2019-12-27"))
                        .startDateTimeUtc(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .status(BillResponse.Status.PENDING)
                        .timezone("UTC")
                        .build()
                )
                .nextToken("nextToken")
                .build()

        assertThat(billSearchResponse.data().getOrNull())
            .containsExactly(
                BillResponse.builder()
                    .id("id")
                    .version(0L)
                    .accountCode("accountCode")
                    .accountId("accountId")
                    .billDate(LocalDate.parse("2019-12-27"))
                    .billFrequencyInterval(0)
                    .billingFrequency(BillResponse.BillingFrequency.DAILY)
                    .billJobId("billJobId")
                    .billTotal(0.0)
                    .createdBy("createdBy")
                    .createdDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .csvStatementGenerated(true)
                    .currency("currency")
                    .addCurrencyConversion(
                        CurrencyConversion.builder().from("EUR").to("USD").multiplier(1.12).build()
                    )
                    .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .dueDate(LocalDate.parse("2019-12-27"))
                    .endDate(LocalDate.parse("2019-12-27"))
                    .endDateTimeUtc(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .externalInvoiceDate(LocalDate.parse("2019-12-27"))
                    .externalInvoiceReference("externalInvoiceReference")
                    .jsonStatementGenerated(true)
                    .lastCalculatedDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .lastModifiedBy("lastModifiedBy")
                    .addLineItem(
                        BillResponse.LineItem.builder()
                            .averageUnitPrice(0.0)
                            .conversionRate(0.0)
                            .convertedSubtotal(0.0)
                            .currency("x")
                            .description("x")
                            .lineItemType(BillResponse.LineItem.LineItemType.STANDING_CHARGE)
                            .quantity(0.0)
                            .subtotal(0.0)
                            .unit("unit")
                            .units(0.0)
                            .id("id")
                            .aggregationId("aggregationId")
                            .balanceId("balanceId")
                            .chargeId("chargeId")
                            .childAccountCode("childAccountCode")
                            .childAccountId("childAccountId")
                            .commitmentId("commitmentId")
                            .compoundAggregationId("compoundAggregationId")
                            .contractId("contractId")
                            .counterId("counterId")
                            .creditTypeId("creditTypeId")
                            .group(
                                BillResponse.LineItem.Group.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .meterId("meterId")
                            .planGroupId("planGroupId")
                            .planId("planId")
                            .pricingId("pricingId")
                            .productCode("productCode")
                            .productId("productId")
                            .productName("productName")
                            .reasonId("reasonId")
                            .referencedBillId("referencedBillId")
                            .referencedLineItemId("referencedLineItemId")
                            .segment(
                                BillResponse.LineItem.Segment.builder()
                                    .putAdditionalProperty("foo", JsonValue.from("string"))
                                    .build()
                            )
                            .sequenceNumber(0)
                            .servicePeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .servicePeriodStartDate(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .addUsagePerPricingBand(
                                BillResponse.LineItem.UsagePerPricingBand.builder()
                                    .bandQuantity(0.0)
                                    .bandSubtotal(0.0)
                                    .bandUnits(0.0)
                                    .creditTypeId("creditTypeId")
                                    .fixedPrice(0.0)
                                    .lowerLimit(0.0)
                                    .pricingBandId("pricingBandId")
                                    .unitPrice(0.0)
                                    .unitSubtotal(0.0)
                                    .build()
                            )
                            .build()
                    )
                    .locked(true)
                    .purchaseOrderNumber("purchaseOrderNumber")
                    .sequentialInvoiceNumber("sequentialInvoiceNumber")
                    .startDate(LocalDate.parse("2019-12-27"))
                    .startDateTimeUtc(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .status(BillResponse.Status.PENDING)
                    .timezone("UTC")
                    .build()
            )
        assertThat(billSearchResponse.nextToken()).contains("nextToken")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val billSearchResponse =
            BillSearchResponse.builder()
                .addData(
                    BillResponse.builder()
                        .id("id")
                        .version(0L)
                        .accountCode("accountCode")
                        .accountId("accountId")
                        .billDate(LocalDate.parse("2019-12-27"))
                        .billFrequencyInterval(0)
                        .billingFrequency(BillResponse.BillingFrequency.DAILY)
                        .billJobId("billJobId")
                        .billTotal(0.0)
                        .createdBy("createdBy")
                        .createdDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .csvStatementGenerated(true)
                        .currency("currency")
                        .addCurrencyConversion(
                            CurrencyConversion.builder()
                                .from("EUR")
                                .to("USD")
                                .multiplier(1.12)
                                .build()
                        )
                        .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .dueDate(LocalDate.parse("2019-12-27"))
                        .endDate(LocalDate.parse("2019-12-27"))
                        .endDateTimeUtc(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .externalInvoiceDate(LocalDate.parse("2019-12-27"))
                        .externalInvoiceReference("externalInvoiceReference")
                        .jsonStatementGenerated(true)
                        .lastCalculatedDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .lastModifiedBy("lastModifiedBy")
                        .addLineItem(
                            BillResponse.LineItem.builder()
                                .averageUnitPrice(0.0)
                                .conversionRate(0.0)
                                .convertedSubtotal(0.0)
                                .currency("x")
                                .description("x")
                                .lineItemType(BillResponse.LineItem.LineItemType.STANDING_CHARGE)
                                .quantity(0.0)
                                .subtotal(0.0)
                                .unit("unit")
                                .units(0.0)
                                .id("id")
                                .aggregationId("aggregationId")
                                .balanceId("balanceId")
                                .chargeId("chargeId")
                                .childAccountCode("childAccountCode")
                                .childAccountId("childAccountId")
                                .commitmentId("commitmentId")
                                .compoundAggregationId("compoundAggregationId")
                                .contractId("contractId")
                                .counterId("counterId")
                                .creditTypeId("creditTypeId")
                                .group(
                                    BillResponse.LineItem.Group.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .meterId("meterId")
                                .planGroupId("planGroupId")
                                .planId("planId")
                                .pricingId("pricingId")
                                .productCode("productCode")
                                .productId("productId")
                                .productName("productName")
                                .reasonId("reasonId")
                                .referencedBillId("referencedBillId")
                                .referencedLineItemId("referencedLineItemId")
                                .segment(
                                    BillResponse.LineItem.Segment.builder()
                                        .putAdditionalProperty("foo", JsonValue.from("string"))
                                        .build()
                                )
                                .sequenceNumber(0)
                                .servicePeriodEndDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .servicePeriodStartDate(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .addUsagePerPricingBand(
                                    BillResponse.LineItem.UsagePerPricingBand.builder()
                                        .bandQuantity(0.0)
                                        .bandSubtotal(0.0)
                                        .bandUnits(0.0)
                                        .creditTypeId("creditTypeId")
                                        .fixedPrice(0.0)
                                        .lowerLimit(0.0)
                                        .pricingBandId("pricingBandId")
                                        .unitPrice(0.0)
                                        .unitSubtotal(0.0)
                                        .build()
                                )
                                .build()
                        )
                        .locked(true)
                        .purchaseOrderNumber("purchaseOrderNumber")
                        .sequentialInvoiceNumber("sequentialInvoiceNumber")
                        .startDate(LocalDate.parse("2019-12-27"))
                        .startDateTimeUtc(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .status(BillResponse.Status.PENDING)
                        .timezone("UTC")
                        .build()
                )
                .nextToken("nextToken")
                .build()

        val roundtrippedBillSearchResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(billSearchResponse),
                jacksonTypeRef<BillSearchResponse>(),
            )

        assertThat(roundtrippedBillSearchResponse).isEqualTo(billSearchResponse)
    }
}
