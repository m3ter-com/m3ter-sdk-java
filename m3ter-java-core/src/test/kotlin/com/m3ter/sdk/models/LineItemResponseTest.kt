// File generated from our OpenAPI spec by Stainless.

package com.m3ter.sdk.models

import com.m3ter.sdk.core.JsonValue
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LineItemResponseTest {

    @Test
    fun create() {
        val lineItemResponse =
            LineItemResponse.builder()
                .id("id")
                .version(0L)
                .aggregationId("aggregationId")
                .averageUnitPrice(0.0)
                .balanceId("balanceId")
                .addBandUsage(
                    LineItemResponse.BandUsage.builder()
                        .bandQuantity(0.0)
                        .bandSubtotal(0.0)
                        .bandUnits(0.0)
                        .creditTypeId("creditTypeId")
                        .fixedPrice(0.0)
                        .lowerLimit(0.0)
                        .pricingBandId("pricingBandId")
                        .unitPrice(0.0)
                        .unitSubtotal(0.0)
                        .build()
                )
                .billId("billId")
                .commitmentId("commitmentId")
                .compoundAggregationId("compoundAggregationId")
                .contractId("contractId")
                .conversionRate(0.0)
                .convertedSubtotal(0.0)
                .counterId("counterId")
                .createdBy("createdBy")
                .creditTypeId("creditTypeId")
                .currency("currency")
                .description("description")
                .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .group(
                    LineItemResponse.Group.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .jsonUsageGenerated(true)
                .lastModifiedBy("lastModifiedBy")
                .lineItemType(LineItemResponse.LineItemType.STANDING_CHARGE)
                .meterId("meterId")
                .planGroupId("planGroupId")
                .planId("planId")
                .pricingId("pricingId")
                .productCode("productCode")
                .productId("productId")
                .productName("productName")
                .quantity(0.0)
                .reasonId("reasonId")
                .referencedBillId("referencedBillId")
                .referencedLineItemId("referencedLineItemId")
                .segment(
                    LineItemResponse.Segment.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .sequenceNumber(0L)
                .servicePeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .servicePeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .subtotal(0.0)
                .unit("unit")
                .units(0.0)
                .build()

        assertThat(lineItemResponse.id()).isEqualTo("id")
        assertThat(lineItemResponse.version()).isEqualTo(0L)
        assertThat(lineItemResponse.aggregationId()).contains("aggregationId")
        assertThat(lineItemResponse.averageUnitPrice()).contains(0.0)
        assertThat(lineItemResponse.balanceId()).contains("balanceId")
        assertThat(lineItemResponse.bandUsage().getOrNull())
            .containsExactly(
                LineItemResponse.BandUsage.builder()
                    .bandQuantity(0.0)
                    .bandSubtotal(0.0)
                    .bandUnits(0.0)
                    .creditTypeId("creditTypeId")
                    .fixedPrice(0.0)
                    .lowerLimit(0.0)
                    .pricingBandId("pricingBandId")
                    .unitPrice(0.0)
                    .unitSubtotal(0.0)
                    .build()
            )
        assertThat(lineItemResponse.billId()).contains("billId")
        assertThat(lineItemResponse.commitmentId()).contains("commitmentId")
        assertThat(lineItemResponse.compoundAggregationId()).contains("compoundAggregationId")
        assertThat(lineItemResponse.contractId()).contains("contractId")
        assertThat(lineItemResponse.conversionRate()).contains(0.0)
        assertThat(lineItemResponse.convertedSubtotal()).contains(0.0)
        assertThat(lineItemResponse.counterId()).contains("counterId")
        assertThat(lineItemResponse.createdBy()).contains("createdBy")
        assertThat(lineItemResponse.creditTypeId()).contains("creditTypeId")
        assertThat(lineItemResponse.currency()).contains("currency")
        assertThat(lineItemResponse.description()).contains("description")
        assertThat(lineItemResponse.dtCreated())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(lineItemResponse.dtLastModified())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(lineItemResponse.group())
            .contains(
                LineItemResponse.Group.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(lineItemResponse.jsonUsageGenerated()).contains(true)
        assertThat(lineItemResponse.lastModifiedBy()).contains("lastModifiedBy")
        assertThat(lineItemResponse.lineItemType())
            .contains(LineItemResponse.LineItemType.STANDING_CHARGE)
        assertThat(lineItemResponse.meterId()).contains("meterId")
        assertThat(lineItemResponse.planGroupId()).contains("planGroupId")
        assertThat(lineItemResponse.planId()).contains("planId")
        assertThat(lineItemResponse.pricingId()).contains("pricingId")
        assertThat(lineItemResponse.productCode()).contains("productCode")
        assertThat(lineItemResponse.productId()).contains("productId")
        assertThat(lineItemResponse.productName()).contains("productName")
        assertThat(lineItemResponse.quantity()).contains(0.0)
        assertThat(lineItemResponse.reasonId()).contains("reasonId")
        assertThat(lineItemResponse.referencedBillId()).contains("referencedBillId")
        assertThat(lineItemResponse.referencedLineItemId()).contains("referencedLineItemId")
        assertThat(lineItemResponse.segment())
            .contains(
                LineItemResponse.Segment.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(lineItemResponse.sequenceNumber()).contains(0L)
        assertThat(lineItemResponse.servicePeriodEndDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(lineItemResponse.servicePeriodStartDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(lineItemResponse.subtotal()).contains(0.0)
        assertThat(lineItemResponse.unit()).contains("unit")
        assertThat(lineItemResponse.units()).contains(0.0)
    }
}
