// File generated from our OpenAPI spec by Stainless.

package com.m3ter.sdk.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class UserMeResponseTest {

    @Test
    fun createUserMeResponse() {
        val userMeResponse =
            UserMeResponse.builder()
                .organization(
                    UserMeResponse.Organization.builder()
                        .id("id")
                        .version(0L)
                        .addressLine1("addressLine1")
                        .addressLine2("addressLine2")
                        .addressLine3("addressLine3")
                        .addressLine4("addressLine4")
                        .billingContactUserId1("billingContactUserId1")
                        .billingContactUserId2("billingContactUserId2")
                        .billingContactUserId3("billingContactUserId3")
                        .country("country")
                        .createdBy("createdBy")
                        .customerId("customerId")
                        .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .invoiceGeneralReference("invoiceGeneralReference")
                        .lastModifiedBy("lastModifiedBy")
                        .locality("locality")
                        .organizationName("organizationName")
                        .orgId("orgId")
                        .postCode("postCode")
                        .purchaseOrderNumber("purchaseOrderNumber")
                        .region("region")
                        .shortName("shortName")
                        .status(UserMeResponse.Organization.Status.ACTIVE)
                        .taxId("taxId")
                        .type(UserMeResponse.Organization.Type.PRODUCTION)
                        .build()
                )
                .serviceUser(
                    UserMeResponse.ServiceUser.builder()
                        .id("id")
                        .createdBy("createdBy")
                        .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .lastModifiedBy("lastModifiedBy")
                        .name("name")
                        .version(0L)
                        .build()
                )
                .user(
                    UserMeResponse.User.builder()
                        .id("id")
                        .contactNumber("contactNumber")
                        .createdBy("createdBy")
                        .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .email("email")
                        .firstAcceptedTermsAndConditions(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .firstName("firstName")
                        .lastAcceptedTermsAndConditions(
                            OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                        )
                        .lastModifiedBy("lastModifiedBy")
                        .lastName("lastName")
                        .addOrganization("string")
                        .supportUser(true)
                        .version(0L)
                        .build()
                )
                .build()
        assertThat(userMeResponse).isNotNull
        assertThat(userMeResponse.organization())
            .contains(
                UserMeResponse.Organization.builder()
                    .id("id")
                    .version(0L)
                    .addressLine1("addressLine1")
                    .addressLine2("addressLine2")
                    .addressLine3("addressLine3")
                    .addressLine4("addressLine4")
                    .billingContactUserId1("billingContactUserId1")
                    .billingContactUserId2("billingContactUserId2")
                    .billingContactUserId3("billingContactUserId3")
                    .country("country")
                    .createdBy("createdBy")
                    .customerId("customerId")
                    .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .invoiceGeneralReference("invoiceGeneralReference")
                    .lastModifiedBy("lastModifiedBy")
                    .locality("locality")
                    .organizationName("organizationName")
                    .orgId("orgId")
                    .postCode("postCode")
                    .purchaseOrderNumber("purchaseOrderNumber")
                    .region("region")
                    .shortName("shortName")
                    .status(UserMeResponse.Organization.Status.ACTIVE)
                    .taxId("taxId")
                    .type(UserMeResponse.Organization.Type.PRODUCTION)
                    .build()
            )
        assertThat(userMeResponse.serviceUser())
            .contains(
                UserMeResponse.ServiceUser.builder()
                    .id("id")
                    .createdBy("createdBy")
                    .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .lastModifiedBy("lastModifiedBy")
                    .name("name")
                    .version(0L)
                    .build()
            )
        assertThat(userMeResponse.user())
            .contains(
                UserMeResponse.User.builder()
                    .id("id")
                    .contactNumber("contactNumber")
                    .createdBy("createdBy")
                    .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .email("email")
                    .firstAcceptedTermsAndConditions(
                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                    )
                    .firstName("firstName")
                    .lastAcceptedTermsAndConditions(
                        OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                    )
                    .lastModifiedBy("lastModifiedBy")
                    .lastName("lastName")
                    .addOrganization("string")
                    .supportUser(true)
                    .version(0L)
                    .build()
            )
    }
}
