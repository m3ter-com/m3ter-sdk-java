// File generated from our OpenAPI spec by Stainless.

package com.m3ter.sdk.models

import com.m3ter.sdk.core.JsonValue
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class BillResponseTest {

    @Test
    fun createBillResponse() {
        val billResponse =
            BillResponse.builder()
                .id("id")
                .version(0L)
                .accountCode("accountCode")
                .accountId("accountId")
                .billDate(LocalDate.parse("2019-12-27"))
                .billFrequencyInterval(0L)
                .billingFrequency(BillResponse.BillingFrequency.DAILY)
                .billJobId("billJobId")
                .billTotal(0.0)
                .createdBy("createdBy")
                .createdDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .csvStatementGenerated(true)
                .currency("currency")
                .addCurrencyConversion(
                    CurrencyConversion.builder().from("EUR").to("USD").multiplier(1.12).build()
                )
                .dtCreated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .dtLastModified(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .dueDate(LocalDate.parse("2019-12-27"))
                .endDate(LocalDate.parse("2019-12-27"))
                .endDateTimeUtc(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .externalInvoiceDate(LocalDate.parse("2019-12-27"))
                .externalInvoiceReference("externalInvoiceReference")
                .jsonStatementGenerated(true)
                .lastCalculatedDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .lastModifiedBy("lastModifiedBy")
                .addLineItem(
                    BillResponse.LineItem.builder()
                        .averageUnitPrice(0.0)
                        .conversionRate(0.0)
                        .convertedSubtotal(0.0)
                        .currency("x")
                        .description("x")
                        .lineItemType(BillResponse.LineItem.LineItemType.STANDING_CHARGE)
                        .quantity(0.0)
                        .subtotal(0.0)
                        .unit("unit")
                        .units(0.0)
                        .id("id")
                        .aggregationId("aggregationId")
                        .balanceId("balanceId")
                        .chargeId("chargeId")
                        .childAccountCode("childAccountCode")
                        .childAccountId("childAccountId")
                        .commitmentId("commitmentId")
                        .compoundAggregationId("compoundAggregationId")
                        .contractId("contractId")
                        .counterId("counterId")
                        .creditTypeId("creditTypeId")
                        .group(
                            BillResponse.LineItem.Group.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .meterId("meterId")
                        .planGroupId("planGroupId")
                        .planId("planId")
                        .pricingId("pricingId")
                        .productCode("productCode")
                        .productId("productId")
                        .productName("productName")
                        .reasonId("reasonId")
                        .referencedBillId("referencedBillId")
                        .referencedLineItemId("referencedLineItemId")
                        .segment(
                            BillResponse.LineItem.Segment.builder()
                                .putAdditionalProperty("foo", JsonValue.from("string"))
                                .build()
                        )
                        .sequenceNumber(0L)
                        .servicePeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .servicePeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addUsagePerPricingBand(
                            BillResponse.LineItem.UsagePerPricingBand.builder()
                                .bandQuantity(0.0)
                                .bandSubtotal(0.0)
                                .bandUnits(0.0)
                                .creditTypeId("creditTypeId")
                                .fixedPrice(0.0)
                                .lowerLimit(0.0)
                                .pricingBandId("pricingBandId")
                                .unitPrice(0.0)
                                .unitSubtotal(0.0)
                                .build()
                        )
                        .build()
                )
                .locked(true)
                .purchaseOrderNumber("purchaseOrderNumber")
                .sequentialInvoiceNumber("sequentialInvoiceNumber")
                .startDate(LocalDate.parse("2019-12-27"))
                .startDateTimeUtc(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .status(BillResponse.Status.PENDING)
                .timezone("UTC")
                .build()
        assertThat(billResponse).isNotNull
        assertThat(billResponse.id()).isEqualTo("id")
        assertThat(billResponse.version()).isEqualTo(0L)
        assertThat(billResponse.accountCode()).contains("accountCode")
        assertThat(billResponse.accountId()).contains("accountId")
        assertThat(billResponse.billDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(billResponse.billFrequencyInterval()).contains(0L)
        assertThat(billResponse.billingFrequency()).contains(BillResponse.BillingFrequency.DAILY)
        assertThat(billResponse.billJobId()).contains("billJobId")
        assertThat(billResponse.billTotal()).contains(0.0)
        assertThat(billResponse.createdBy()).contains("createdBy")
        assertThat(billResponse.createdDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(billResponse.csvStatementGenerated()).contains(true)
        assertThat(billResponse.currency()).contains("currency")
        assertThat(billResponse.currencyConversions().get())
            .containsExactly(
                CurrencyConversion.builder().from("EUR").to("USD").multiplier(1.12).build()
            )
        assertThat(billResponse.dtCreated())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(billResponse.dtLastModified())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(billResponse.dueDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(billResponse.endDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(billResponse.endDateTimeUtc())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(billResponse.externalInvoiceDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(billResponse.externalInvoiceReference()).contains("externalInvoiceReference")
        assertThat(billResponse.jsonStatementGenerated()).contains(true)
        assertThat(billResponse.lastCalculatedDate())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(billResponse.lastModifiedBy()).contains("lastModifiedBy")
        assertThat(billResponse.lineItems().get())
            .containsExactly(
                BillResponse.LineItem.builder()
                    .averageUnitPrice(0.0)
                    .conversionRate(0.0)
                    .convertedSubtotal(0.0)
                    .currency("x")
                    .description("x")
                    .lineItemType(BillResponse.LineItem.LineItemType.STANDING_CHARGE)
                    .quantity(0.0)
                    .subtotal(0.0)
                    .unit("unit")
                    .units(0.0)
                    .id("id")
                    .aggregationId("aggregationId")
                    .balanceId("balanceId")
                    .chargeId("chargeId")
                    .childAccountCode("childAccountCode")
                    .childAccountId("childAccountId")
                    .commitmentId("commitmentId")
                    .compoundAggregationId("compoundAggregationId")
                    .contractId("contractId")
                    .counterId("counterId")
                    .creditTypeId("creditTypeId")
                    .group(
                        BillResponse.LineItem.Group.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .meterId("meterId")
                    .planGroupId("planGroupId")
                    .planId("planId")
                    .pricingId("pricingId")
                    .productCode("productCode")
                    .productId("productId")
                    .productName("productName")
                    .reasonId("reasonId")
                    .referencedBillId("referencedBillId")
                    .referencedLineItemId("referencedLineItemId")
                    .segment(
                        BillResponse.LineItem.Segment.builder()
                            .putAdditionalProperty("foo", JsonValue.from("string"))
                            .build()
                    )
                    .sequenceNumber(0L)
                    .servicePeriodEndDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .servicePeriodStartDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .addUsagePerPricingBand(
                        BillResponse.LineItem.UsagePerPricingBand.builder()
                            .bandQuantity(0.0)
                            .bandSubtotal(0.0)
                            .bandUnits(0.0)
                            .creditTypeId("creditTypeId")
                            .fixedPrice(0.0)
                            .lowerLimit(0.0)
                            .pricingBandId("pricingBandId")
                            .unitPrice(0.0)
                            .unitSubtotal(0.0)
                            .build()
                    )
                    .build()
            )
        assertThat(billResponse.locked()).contains(true)
        assertThat(billResponse.purchaseOrderNumber()).contains("purchaseOrderNumber")
        assertThat(billResponse.sequentialInvoiceNumber()).contains("sequentialInvoiceNumber")
        assertThat(billResponse.startDate()).contains(LocalDate.parse("2019-12-27"))
        assertThat(billResponse.startDateTimeUtc())
            .contains(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(billResponse.status()).contains(BillResponse.Status.PENDING)
        assertThat(billResponse.timezone()).contains("UTC")
    }
}
