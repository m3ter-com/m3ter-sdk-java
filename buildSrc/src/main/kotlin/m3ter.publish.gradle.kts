import com.vanniktech.maven.publish.JavadocJar
import com.vanniktech.maven.publish.KotlinJvm
import com.vanniktech.maven.publish.MavenPublishBaseExtension
import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id("com.vanniktech.maven.publish")
}

repositories {
    gradlePluginPortal()
    mavenCentral()
}

extra["signingInMemoryKey"] = System.getenv("GPG_SIGNING_KEY")
extra["signingInMemoryKeyId"] = System.getenv("GPG_SIGNING_KEY_ID")
extra["signingInMemoryKeyPassword"] = System.getenv("GPG_SIGNING_PASSWORD")

configure<MavenPublishBaseExtension> {
    signAllPublications()
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

    coordinates(project.group.toString(), project.name, project.version.toString())
    configure(
        KotlinJvm(
            javadocJar = JavadocJar.Dokka("dokkaJavadoc"),
            sourcesJar = true,
        )
    )

    pom {
        name.set("m3ter API")
        description.set("If you are using Postman, you can:\n\n- Use the **Download** button above to download the m3ter Open API spec JSON\n  file and then import this file as the **m3ter API Collection** into your\n  Workspace. See\n  [Importing the m3ter Open API](https://www.m3ter.com/docs/guides/m3ter-apis/getting-started-with-api-calls#importing-the-m3ter-open-api)\n  in our main user Documentation for details.\n- Copy this link:\n  [m3ter-Template API Collection](https://www.datocms-assets.com/78893/1672846767-m3ter-template-api-collection-postman_collection.json)\n  and use it to import the **m3ter-Template API Collection** into your\n  Workspace. See\n  [Importing the m3ter Template API Collection](https://www.m3ter.com/docs/guides/m3ter-apis/getting-started-with-api-calls#importing-the-m3ter-template-api-collection)\n  in our main user Documentation for details.\n\n---\n\n# Introduction\n\nThe m3ter platform supports two HTTP-based REST APIs returning JSON encoded\nresponses:\n\n- The **Ingest API**, which you can use for submitting raw data measurements.\n  _(See the\n  [Submit Measurements](https://www.m3ter.com/docs/api#tag/Measurements/operation/SubmitMeasurements)\n  endpoint in these API Reference Docs.)_\n- The **Config API**, which you can use for configuration and management. _(All\n  other endpoints in these API Reference Docs.)_\n\n## Authentication and Authorization\n\nOur APIs use an industry-standard authorization protocol known as the OAuth 2.0\nspecification.\n\nOAuth2 supports several grant types, each designed for a specific use case.\nm3ter uses the following two grant types:\n\n- **Authorization Code**: Used for human login access via the m3ter Console.\n- **Client Credentials**: Used for machine-to-machine communication and API\n  access.\n\nComplete the following flow for API access:\n\n1. **Create a Service User and add Permissions**: Log in to the m3ter Console,\n   go to **Settings**, **Access** then **Service Users** tab, and create a\n   Service User. To enable API calls, grant the user **Administrator**\n   permissions.\n2. **Generate Access Keys**: In the Console, open the _Overview_ page for the\n   Service User by clicking on the name. Generate an **Access Key id** and **Api\n   Secret**. Make sure you copy the **Api Secret** because it is only visible at\n   the time of creation.\n\nSee\n[Service Authentication](https://www.m3ter.com/docs/guides/authenticating-with-the-platform/service-authentication)\nfor detailed instructions and an example.\n\n3. **Obtain a Bearer Token using Basic Auth**: We implement the OAuth 2.0 Client\n   Credentials Grant authentication flow for Service User Authentication. Submit\n   a request to the m3ter OAuth Client Credentials authentication flow, using\n   your concatenated **Access Key id** and **Api Secret** to obtain a Bearer\n   Token for your Service User. _See examples below._\n\n4. **Bearer Token Usage**: Use the HTTP 'Authorization' header with the bearer\n   token to authorise all subsequent API requests.\n\n> Warning: The Bearer Token is valid for 18,000 seconds or 5 hours. When the\n> token has expired, you must obtain a new bearer token.\n\nBelow are two examples for obtaining a Bearer Token using Basic Auth: the first\nin cURL and the second as a Python script.\n\n### cURL Example\n\n1. Open your terminal or command prompt.\n2. Use the following `cURL` command to obtain a Bearer Token:\n\n```bash\ncurl -X POST https://api.m3ter.com/oauth/token \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -u your_access_key_id:your_api_secret \\\n  -d 'grant_type=client_credentials'\n```\n\nReplace `your_access_key_id` and `your_api_secret` with your actual **Access Key\nid** and **Api Secret**.\n\n3.  Run the command, and if successful, it will return a JSON response\n    containing the Bearer Token. The response will look like this:\n\n```json\n{\n  \"access_token\": \"your_bearer_token\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 18000\n}\n```\n\nYou can then use the Bearer Token _(the value of `\"access_token\"`)_ for\nsubsequent API calls to m3ter.\n\n### Python Example\n\n1. Install the `requests` library if you haven't already:\n\n```bash\npip install requests\n```\n\n2. Use the following Python script to obtain a Bearer Token:\n\n```python\nimport requests\nimport base64\n\n# Replace these with your Access Key id and Api Secret\naccess_key_id = 'your_access_key_id'\napi_secret = 'your_api_secret'\n\n# Encode the Access Key id and Api Secret in base64 format\ncredentials = base64.b64encode(f'{access_key_id}:{api_secret}'.encode('utf-8')).decode('utf-8')\n\n# Set the m3ter token endpoint URL\ntoken_url = 'https://api.m3ter.com/oauth/token'\n\n# Set the headers for the request\nheaders = {\n    'Authorization': f'Basic {credentials}',\n    'Content-Type': 'application/x-www-form-urlencoded'\n}\n\n# Set the payload for the request\npayload = {\n    'grant_type': 'client_credentials'\n}\n\n# Send the request to obtain the Bearer Token\nresponse = requests.post(token_url, headers=headers, data=payload)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the Bearer Token from the response\n    bearer_token = response.json()['access_token']\n    print(f'Bearer Token: {bearer_token}')\nelse:\n    print(f'Error: {response.status_code} - {response.text}')\n```\n\nReplace `your_access_key_id` and `your_api_secret` with your actual **Access Key\nid** and **Api Secret**.\n\n3. Run the script, and if successful, it will print the Bearer Token. You can\n   then use this Bearer Token for subsequent API calls to m3ter.\n\n## Submitting Personally Identifiable Information (PII)\n\n**IMPORTANT!** Under the\n[Data Processing Agreement](https://www.m3ter.com/docs/legal/dpa), the only\nfields permissible for use to submit any of your end-customer PII data in m3ter\nare the `name`, `address`, and `emailAddress` fields on the **Account** entity -\nsee the details for\n[Create Account](https://www.m3ter.com/docs/api#operation/PostAccount). See also\nsection 4.2 of the\n[Terms of Service](https://www.m3ter.com/docs/legal/terms-of-service).\n\n## Error Codes\n\nThe APIs return standard HTTP response codes to indicate request success or\nfailure.\n\n- `200` code indicates success.\n- `4xx` codes are failures due to problems with the request _(client side\n  errors)_.\n- `5xx` codes indicate valid API requests and the failure is on the server side.\n\nSee\n[HTTP Error Codes](https://www.m3ter.com/docs/guides/m3ter-apis/http-error-codes)\nfor examples and more information.\n\n## Rate and Payload Limits\n\n### Config API Request Rate Limits\n\n- **Source IP Address.** Individual host machines can send up to 20,000 requests\n  over a rolling 5-minute period. _(An average of 66 requests per second)._\n\n- **m3ter Organization** Each m3ter Organization can send a maximum of 50\n  requests per second from any number of source IP addresses.\n\nIf you exceed either of these rate limits, requests are throttled and an HTTP\n429 _(Too Many Requests)_ error response is returned:\n\n- **Source IP address rate limit** - 429 is returned until the total number of\n  requests in the rolling 5-minute period drops below 20,000.\n\n- **m3ter Organization rate limit** - 429 is returned for the remainder of the\n  second in which throttling has occurred.\n\nSee\n[Config API Limits](https://www.m3ter.com/docs/guides/m3ter-apis/config-api-limits)\nfor more information.\n\n### Data Explorer API Request Rate Limits\n\nAs part of the Config API, requests made to the Data Explorer are subject to\ntighter request rate limits:\n\n- **Generally** 1 request per second.\n\n- **Burst** 10 requests per second.\n\nIf you exceed either of these rate limits, requests are throttled and an HTTP\n429 (Too Many Requests) error response is returned.\n\n**Note: Burst limit for Data Explorer requests?** We allow short bursts of\nhigher TPS to allow us to accommodate occasional spikes. For example, if the\nsustained rate is 50 TPS, we might set a bucket capacity (N) of 150. This means\nthat you can do up to 150 TPS for 1s (and empty the bucket), but in the next\nsecond you'll only be able to do 50 TPS because that is all that has been\nrefilled. If requests drop below 50 TPS for a period of time, the bucket will\nrefill back up to full capacity allowing another spike. This is usually referred\nto as \"burst capacity\".\n\n### Ingest API Request Rate and Payload Limits\n\n#### Request Rate Limits\n\n- **Source IP Address.** Individual host machines can send up to 5,000 requests\n  over a rolling 5-minute period. _(An average of 16 requests per second)_.\n\n- **m3ter Organization.** Each m3ter Organization can send a maximum of 50\n  requests per second from any number of source IP addresses.\n\nIf you exceed either of these rate limits, requests are throttled and an HTTP\n429 _(Too Many Requests)_ error response is returned:\n\n- **Source IP address rate limit** - 429 is returned until the total number of\n  requests in the rolling 5-minute period drops below 5,000.\n\n- **m3ter Organization rate limit** - 429 is returned for the remainder of the\n  second in which throttling has occurred.\n\n#### Payload Limit\n\nFor the Ingest API, the maximum request payload size allowed is 512KB. If you\nexceed this request payload limit, then you'll receive a 403 (Forbidden) error\nresponse.\n\nSee\n[Ingest API Limits](https://www.m3ter.com/docs/guides/m3ter-apis/ingest-api-limits)\nfor more information.\n\n## Pagination\n\n**List Endpoints** API endpoints that have a List resources request support\ncursor-based pagination - for example, the `List Accounts` request. These List\ncalls support pagination by taking the two parameters `pageSize` and\n`nextToken`.\n\nThe response of a List API call is a single page list. If the `nextToken`\nparameter is not supplied, the first page returned contains the newest objects\nchronologically. Specify a `nextToken` to retrieve the page of older objects\nthat occur immediately after the last object on the previous page.\n\nUse `pageSize` to limit the list results per page, typically this allows up to a\nmaximum of 100 or 200 per page.\n\n**Search Endpoints** API endpoints that have a Search resources request support\ncursor-based pagination - for example, the `Search Accounts` request. These\nSearch calls support pagination by taking the two parameters `pageSize` and\n`fromDocument`.\n\nThe response of a Search API call is a single page list. If the `fromDocument`\nparameter is not supplied, the first page returned contains the newest objects\nchronologically. Specify a `fromDocument` to retrieve the page of older objects\nthat occur immediately after the last object on the previous page.\n\nUse `pageSize` to limit the list results per page, typically this allows up to a\nmaximum of 100 or 200 per page. Default is 10.\n\n## Changelog\n\nCheck out the latest API features, updates, and functionality by looking in the\nAPI Updates subsection of the\n[m3ter Changelog](https://www.m3ter.com/docs/changelog).\n\n---\n\nAPI Quick Start This API Quick Start section provides an entry point to using\nthe m3ter APIs. The example given takes you through the steps of first\nauthenticating with the m3ter platform then going on to retrieve a list of\nAccounts for your Organization. Code examples are provided in Python,\nJavaScript, C++, and command line HTTP via `cURL`.\n\nSee also\n[Getting Started with API Calls](https://www.m3ter.com/docs/guides/m3ter-apis/getting-started-with-api-calls)\nfor more on using our API with examples.\n\n## Step 1: Create a Service User and add Permissions\n\nLog in to the m3ter Console, go to **Settings**, **Access** then **Service\nUsers** tab, and create a Service User. To enable API calls, grant the user\n**Administrator** permissions.\n\n## Step 2: Generate Access Keys\n\nIn the Console, open the **Service Users Details** page for the Service User by\nclicking on the Service User **NAME**. Generate an **Access Key id** and **Api\nSecret**. Make sure to copy the **Api Secret** as it is only visible at the time\nof creation.\n\nFor further guidance on these two steps, see\n[Creating and Configuring Service Users](https://www.m3ter.com/docs/guides/organization-and-access-management/managing-users/creating-and-configuring-service-users)\nin our main user Documentation.\n\n## Step 3: Install Dependencies (if applicable)\n\n### Python\n\nInstall the `requests` library:\n\n```bash\npip install requests\n```\n\n### JavaScript\n\nInstall the `axios` library:\n\n```bash\nnpm install axios\n```\n\n### C++\n\nInstall the `libcurl` and `jsoncpp` libraries.\n\nFor Windows based systems with `vcpkg` package manager installed:\n\n```bash\nvcpkg install curl[openssl] jsoncpp\n```\n\nFor Debian based Linux operating systems:\n\n```bash\nsudo apt-get install libcurl4-openssl-dev libjsoncpp-dev\n```\n\n## Step 4: Obtain a Bearer Token using Basic Auth\n\nSubmit a request to the m3ter OAuth Client Credentials authentication flow,\nusing your concatenated **Access Key id** and **Api Secret** to obtain a Bearer\nToken for your Service User.\n\n### cURL\n\n```bash\ncurl -X POST https://api.m3ter.com/oauth/token \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -u your_access_key_id:your_api_secret \\\n  -d 'grant_type=client_credentials'\n```\n\nReplace `your_access_key_id` and `your_api_secret` with your actual **Access Key\nid** and **Api Secret**. Run the command, and if successful, it will return a\nJSON response containing the Bearer Token.\n\n### Python\n\n```python\nimport requests\nimport base64\n\n# Replace these with your Access Key id and Api Secret\naccess_key_id = 'your_access_key_id'\napi_secret = 'your_api_secret'\n\n# Encode the Access Key id and Api Secret in base64 format\ncredentials = base64.b64encode(f'{access_key_id}:{api_secret}'.encode('utf-8')).decode('utf-8')\n\n# Set the m3ter token endpoint URL\ntoken_url = 'https://api.m3ter.com/oauth/token'\n\n# Set the headers for the request\nheaders = {\n    'Authorization': f'Basic {credentials}',\n    'Content-Type': 'application/x-www-form-urlencoded'\n}\n\n# Set the payload for the request\npayload = {\n    'grant_type': 'client_credentials'\n}\n\n# Send the request to obtain the Bearer Token\nresponse = requests.post(token_url, headers=headers, data=payload)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the Bearer Token from the response\n    bearer_token = response.json()['access_token']\n    print(f'Bearer Token: {bearer_token}')\nelse:\n    print(f'Error: {response.status_code} - {response.text}')\n```\n\nReplace `your_access_key_id` and `your_api_secret` with your actual **Access Key\nid** and **Api Secret**. Run the script, and if successful, it will print the\nBearer Token.\n\n### JavaScript\n\n```javascript\nconst axios = require(\"axios\");\nconst btoa = require(\"btoa\");\n\nconst accessKeyId = \"your_access_key_id\";\nconst apiSecret = \"your_api_secret\";\nconst basicAuth = btoa(`\${accessKeyId}:\${apiSecret}`);\nconst url = \"https://api.m3ter.com/oauth/token\";\n\nconst options = {\n  method: \"POST\",\n  url: url,\n  headers: {\n    Authorization: `Basic \${basicAuth}`,\n    \"Content-Type\": \"application/json\",\n  },\n  data: {\n    grant_type: \"client_credentials\",\n  },\n};\n\naxios(options)\n  .then((response) => console.log(\"Access Token:\", response.data.access_token))\n  .catch((error) => console.error(\"Error:\", error));\n```\n\nReplace `your_access_key_id` and `your_api_secret` with your actual **Access Key\nid** and **Api Secret**. Run the script, and if successful, it will print the\nBearer Token.\n\n### C++\n\n```C++\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n#include <json/json.h>\n#include <sstream>\n#include <cstdlib>\n#include <base64.h>\n\nsize_t write_callback(void *contents, size_t size, size_t nmemb, void *userp) {\n    ((std::string *)userp)->append((char *)contents, size * nmemb);\n    return size * nmemb;\n}\n\nint main() {\n    // Replace these with your Access Key id and Api Secret\n    std::string access_key_id = \"your_access_key_id\";\n    std::string api_secret = \"your_api_secret\";\n\n    // Encode the Access Key id and Api Secret in base64 format\n    std::string credentials = base64_encode(reinterpret_cast<const unsigned char*>(access_key_id.append(\":\").append(api_secret).c_str()), access_key_id.length());\n\n    // Set the m3ter token endpoint URL\n    std::string token_url = \"https://api.m3ter.com/oauth/token\";\n\n    // Initialize libcurl\n    curl_global_init(CURL_GLOBAL_DEFAULT);\n    CURL *curl = curl_easy_init();\n\n    if (curl) {\n        // Set the headers for the request\n        struct curl_slist *headers = nullptr;\n        headers = curl_slist_append(headers, \"Content-Type: application/x-www-form-urlencoded\");\n        std::string auth_header = \"Authorization: Basic \" + credentials;\n        headers = curl_slist_append(headers, auth_header.c_str());\n\n        // Set the payload for the request\n        std::string payload = \"grant_type=client_credentials\";\n\n        // Prepare the request\n        curl_easy_setopt(curl, CURLOPT_URL, token_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, payload.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);\n\n        // Send the request and store the response\n        std::string response;\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        long response_code;\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n\n        // Check if the request was successful\n        if (res != CURLE_OK || response_code != 200) {\n            std::cerr << \"Error: \" << response_code << \" - \" << curl_easy_strerror(res) << std::endl;\n        } else {\n            // Parse the JSON response\n            Json::Value json;\n            std::istringstream(response) >> json;\n            std::string bearer_token = json[\"access_token\"].asString();\n\n            std::cout << \"Bearer Token: \" << bearer_token << std::endl;\n        }\n\n        // Cleanup\n        curl_easy_cleanup(curl);\n        curl_slist_free_all(headers);\n    }\n\n    curl_global_cleanup();\n    return 0;\n}\n```\n\nReplace `your_access_key_id` and `your_api_secret` with your actual **Access Key\nid** and **Api Secret**. Run the program, and if successful, it will print the\nBearer Token.\n\n## Step 5: Retrieve Organization ID\n\nCopy your Organization ID from the m3ter Console by going to **Settings**,\n**Organization**, then the **Configuration** tab. The Organization ID is\ndisplayed on the _Organization Details_ card and you can **Copy** it directly to\nyour clipboard.\n\n## Step 6: Retrieve Accounts List\n\nMake a call to the\n[List Accounts](https://www.m3ter.com/docs/api#tag/Account/operation/ListAccounts)\nAPI endpoint using the Organization ID copied in the previous step. Use the\nBearer Token to authorize API calls in the HTTP 'Authorization' header.\n\n### cURL\n\n```bash\ncurl -X GET \"https://api.m3ter.com/organizations/{orgId}/accounts?pageSize={pageSize}&nextToken={nextToken}\" \\\n     -H \"Authorization: Bearer {access_token}\"\n```\n\nReplace `{orgId}`, `{pageSize}`, `{nextToken}`, and `{access_token}` with your\nOrganization ID, desired page size, next token _(if needed)_, and Bearer Token\nrespectively.\n\n### Python\n\n```python\nimport requests\n\norg_id = 'your_org_id'\npage_size = 'your_page_size'\nnext_token = 'your_next_token'  # Optional, use if needed\naccess_token = 'your_bearer_token'\n\nurl = f'https://api.m3ter.com/organizations/{org_id}/accounts?pageSize={page_size}&nextToken={next_token}'\n\nheaders = {\n    'Authorization': f'Bearer {access_token}'\n}\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    accounts = response.json()\n    print(accounts)\nelse:\n    print(f\"Error: {response.status_code}\")\n```\n\nReplace `{orgId}`, `{pageSize}`, `{nextToken}`, and `{access_token}` with your\nOrganization ID, desired page size, next token _(if needed)_, and Bearer Token\nrespectively.\n\n### JavaScript\n\n```javascript\nconst axios = require(\"axios\");\n\nconst org_id = \"your_org_id\";\nconst page_size = \"your_page_size\";\nconst next_token = \"your_next_token\"; // Optional, use if needed\nconst access_token = \"your_bearer_token\";\n\nconst url = `https://api.m3ter.com/organizations/\${org_id}/accounts?pageSize=\${page_size}&nextToken=\${next_token}`;\n\nconst headers = {\n  Authorization: `Bearer \${access_token}`,\n};\n\naxios\n  .get(url, { headers })\n  .then((response) => {\n    if (response.status === 200) {\n      const accounts = response.data;\n      console.log(accounts);\n    } else {\n      console.log(`Error: \${response.status}`);\n    }\n  })\n  .catch((error) => {\n    console.error(`Error: \${error.response.status}`);\n  });\n```\n\nReplace `{orgId}`, `{pageSize}`, `{nextToken}`, and `{access_token}` with your\nOrganization ID, desired page size, next token _(if needed)_, and Bearer Token\nrespectively.\n\n### C++\n\n```C++\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <curl/curl.h>\n#include <json/json.h>\n\nsize_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n  ((std::string*)userp)->append((char*)contents, size * nmemb);\n  return size * nmemb;\n}\n\nint main() {\n  std::string org_id = \"your_org_id\";\n  std::string page_size = \"your_page_size\";\n  std::string next_token = \"your_next_token\";  // Optional, use if needed\n  std::string access_token = \"your_bearer_token\";\n\n  std::string url = \"https://api.m3ter.com/organizations/\" + org_id + \"/accounts?pageSize=\" + page_size + \"&nextToken=\" + next_token;\n  std::string auth_header = \"Authorization: Bearer \" + access_token;\n  std::string read_buffer;\n\n  CURL* curl = curl_easy_init();\n  if(curl) {\n    struct curl_slist* headers = NULL;\n    headers = curl_slist_append(headers, auth_header.c_str());\n\n    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);\n    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &read_buffer);\n    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n\n    CURLcode res = curl_easy_perform(curl);\n    if(res != CURLE_OK) {\n      std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n    } else {\n      long response_code;\n      curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n      if (response_code == 200) {\n        Json::Value jsonData;\n        Json::CharReaderBuilder jsonReader;\n        std::string errs;\n        std::istringstream iss(read_buffer);\n\n        if (Json::parseFromStream(jsonReader, iss, &jsonData, &errs)) {\n          std::cout << jsonData << std::endl;\n        }\n      } else {\n        std::cout << \"Error: \" << response_code << std::endl;\n      }\n    }\n\n    curl_easy_cleanup(curl);\n    curl_slist_free_all(headers);\n  }\n\n  return 0;\n}\n```\n\nReplace `{orgId}`, `{pageSize}`, `{nextToken}`, and `{access_token}` with your\nOrganization ID, desired page size, next token _(if needed)_, and Bearer Token\nrespectively.\n\n---\n\n# Integrations Webhook API Example\n\nA major benefit of using m3ter is that it seamlessly integrates with your\ncurrent technology stack. You can create webhook destinations to link you\nintegrations using the API, or via the Console:\n\n- This section provides a worked example showing you how to set up a Webhook via\n  the API.\n- See\n  [Creating and Managing Destinations](https://www.m3ter.com/docs/guides/integrations/setting-up-native-integrations/creating-and-managing-destinations)\n  in the m3ter documentation for instructions on using the Console.\n\n## Step 1: Create a Service User and Generate Access Keys\n\n1. **Create a Service User**: Log in to the m3ter Console, go to **Settings**,\n   **Access** then **Service Users** tab, and create a Service User. To enable\n   API calls, grant the user **Administrator** permissions.\n2. **Generate Access Keys**: In the Console, open the **Service User Details**\n   page for the Service User by clicking on the **NAME** hotlink text. Select\n   **Generate Access Key** to generate an **Access Key id** and **Api Secret**.\n   Make sure you copy the **Api Secret** because it is only visible at the time\n   of creation.\n\nFor further guidance on completing **Step 1**, see\n[Creating and Configuring Service Users](https://www.m3ter.com/docs/guides/organization-and-access-management/managing-users/creating-and-configuring-service-users)\nin our main user Documentation.\n\n## Step 2: Obtain a Bearer Token using Basic Auth\n\nWe implement the OAuth 2.0 Client Credentials Grant authentication flow for\nService User Authentication. Submit a request to the m3ter OAuth Client\nCredentials authentication flow, using your concatenated **Access Key id** and\n**Api Secret** to obtain a Bearer Token for your Service User. Here's an example\nin Python code:\n\n```python\nimport requests\nimport base64\n\n# Replace these with your Access Key id and Api Secret\naccess_key_id = 'your_access_key_id'\napi_secret = 'your_api_secret'\n\n# Encode the Access Key id and Api Secret in base64 format\ncredentials = base64.b64encode(f'{access_key_id}:{api_secret}'.encode('utf-8')).decode('utf-8')\n\n# Set the m3ter token endpoint URL\ntoken_url = 'https://api.m3ter.com/oauth/token'\n\n# Set the headers for the request\nheaders = {\n    'Authorization': f'Basic {credentials}',\n    'Content-Type': 'application/x-www-form-urlencoded'\n}\n\n# Set the payload for the request\npayload = {\n    'grant_type': 'client_credentials'\n}\n\n# Send the request to obtain the Bearer Token\nresponse = requests.post(token_url, headers=headers, data=payload)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the Bearer Token from the response\n    bearer_token = response.json()['access_token']\n    print(f'Bearer Token: {bearer_token}')\nelse:\n    print(f'Error: {response.status_code} - {response.text}')\n```\n\nReplace `your_access_key_id` and `your_api_secret` with your actual **Access Key\nid** and **Api Secret**. Run the script, and if successful, it will print the\nBearer Token.\n\n## Step 3: Create a Webhook (Destination)\n\nAfter obtaining the Bearer Token, you can use it to authorize your API calls.\nHere's a Python example of creating a webhook:\n\n```python\nimport requests\nimport json\n\n# API endpoint\nurl = \"https://api.m3ter.com/organizations/{orgId}/integrationdestinations/webhooks\"  # replace {orgId} with your organization's UUID\n\n# Headers\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {bearer_token}\"  # replace with your actual Bearer Token\n}\n\n# Request body\npayload = {\n    \"url\": \"https://your-webhook-listener.com\",  # replace with your actual webhook listener URL\n    \"credentials\": {\n        \"type\": \"M3TER_SIGNED_REQUEST\",\n        \"apiKey\": access_key_id,  # replace with your actual API key\n        \"secret\": api_secret  # replace with your actual secret\n    }\n}\n\n# Make the POST request\nresponse = requests.post(url, headers=headers, data=json.dumps(payload))\n\n# Print the response\nprint(response.json())\n```\n\n## Step 4: Validate Incoming Requests\n\nOnce your webhook is set up, you'll want to validate incoming requests to ensure\nthey're coming from m3ter. All requests we make to your webhook are signed by\nus. When you receive a request on your configured endpoint, validate the\n`X-m3ter-signature` header by preparing a payload string that you sign with your\nAPI secret.\n\nYou must concatenate the following data using a pipe '|' separator to compute\nthe payload:\n\n- url\n- query string - Currently, there's no support for passing in query parameters.\n  For now, you can hard code to this string: '{}'\n- API Key - provided in the `X-m3ter-apikey` header.\n- timestamp - provided in the `X-m3ter-timestamp` header.\n- body - the request body.\n\nYou can now set up and validate webhooks using the m3ter Console and API. Always\nrefer to the latest [m3ter documentation](https://www.m3ter.com/docs) for\naccurate and up to date information.\n\n---\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->")
        url.set("https://www.m3ter.com")

        licenses {
            license {
                name.set("Apache-2.0")
            }
        }

        developers {
            developer {
                name.set("M3ter")
                email.set("sdks@m3ter.com")
            }
        }

        scm {
            connection.set("scm:git:git://github.com/m3ter-com/m3ter-sdk-java.git")
            developerConnection.set("scm:git:git://github.com/m3ter-com/m3ter-sdk-java.git")
            url.set("https://github.com/m3ter-com/m3ter-sdk-java")
        }
    }
}
